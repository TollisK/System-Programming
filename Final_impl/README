    3η Εργασία Προγραμματισμός Συστήματος

    Ονοματεπώνυμο: Απόστολος Καρβέλας

    Α.Μ.: 1115201800312

    Εκτέλεση προγράμματος:

    Για την εκτέλεση του προγράμματος υπάρχει αρχείο makefile, το οποίο μεταγλωττίζει τα 
    αρχεία σε εκτελέσιμο με όνομα travelMonitorClient και την χρησιμοποιούμε τρέχοντας την 
    εντολή make. Αφού έχει δημιουργηθεί εκτελέσιμο αρχείο, το καλούμε με την εντολή 
    ./travelMonitor -b X -s Y -i Z -m K -c C -t T , όπου X,Y,Z,K οι παράμετροι για το μέγεθος του 
    buffersize  (με προκαθορισμένη τιμή 200 bytes), το μέγεθος του bloom filter 
    (προκαθορισμένη τιμή 10000 bytes), το όνομα του φακέλου με τα δεδομένα και τον αριθμό 
    των process Monitor που θέλουμε να τρέχουν (προκαθορισμένη τιμή 2) αντίστοιχα. Επίσης 
    τα C και Τ συμβολίζουν τον μέγεθος του κυκλικού buffer ενώ το Τ τον αριθμό των threads.  
    Στην συνέχεια περιμένει εισαγωγή από τον χρήστη για την εκτέλεση μιας εντολής.

    Αρχεία κώδικα:

    Στον φάκελο hw υπάρχουν τα .cpp και .h αρχεία από την πρώτη άσκηση για την υλοποίηση 
    του bloom filter, skip list, country list και person list με την διαφορά στο bloom.cpp/.h του 
    οποίου έχουν προστεθεί μερικές καινούργιες δομές.

    Struct Record: Για την αποθήκευση των εγκρίσεων που στάλθηκαν από τον χρήστη για 
    αξιολόγηση οπότε κρατάει την χώρα, το όνομα του ιού, την ημερομηνία και το αν τελικά 
    ήταν εμβολιασμένος ή όχι. Επίσης έχει δείκτη next για την υλοποίηση λίστας.

    Struct Monitor: Δομή για την αποθήκευση των πληροφοριών που έχει κάθε παιδί Monitor, 
    και αποτελείται από τις χώρες που αναλαμβάνει, το process id του, τις τιμές writefd και 
    readfd από το open των named pipes και τα μονοπάτια αυτών.
    travelMonitorClient.cpp:

    Το αρχείο αυτό είναι παρόμοιο με το travelMonitor της προηγούμενης εργασίας με την 
    κύρια διαφορά ότι η σύνδεση του με τα MonitorServers επιτυγχάνεται μέσω sockets αντί 
    για fifo pipes. Η υλοποίηση αυτή πραγματοποιείται βρίσκοντας το όνομα και το IP του 
    μηχανήματος και στην συνέχεια συνδέεται με κάθε ένα Monitor αποθηκεύοντας το socket 
    στον πίνακα από δεδομένα για κάθε παιδί. Το πέρασμα των δεδομένων εισαγωγής, όπως 
    και των μονοπατιών που θα ασχοληθούν, περνιούνται αυτήν την φορά μέσω την execvp και 
    τέλος στην συνάρτηση "/addVaccinationRecords" αντί για σήμα, στέλνει μέσω socket στο 
    σωστό Monitor.

    MonitorServer.cpp:

    Όπως με το travelMonitorClient έτσι και τα Monitos είναι σχεδόν ίδια με της 2ης εργασίας. 
    Στην αρχή διαβάζει τα δεδομένα εισόδου και τα μονοπάτια μέσω των ορισμάτων της και 
    συνδέεται με το MonitorClient μέσω sockets. Τοποθετεί τα μονοπάτια των αρχείων σε έναν 
    πίνακα από strings αφού πρώτα έχει βρει τον αριθμό των αρχείων για την δημιουργία του 
    buffer και την χρήση του από τα threads. Στην συνέχεια, αρχικοποιεί τον κυκλικό buffer 
    καθώς και τα signals και mutexes και δημιουργεί threads όσο τα δεδομένα εισόδου 
    καλώντας την συνάρτηση consumer. Ενώ το main thread καλεί την συνάρτηση producer και 
    περιμένει να τελειώσουν τα παιδιά μέσω join. H consumer όταν βρίσκει στοιχείο στο 
    κυκλικό buffer το παίρνει μέσω της obtain που αφαιρεί το στοιχείο από τον πίνακα και το 
    προσθέτει στις δομές. Ενώ η producer καλεί την place που προσθέτει στον κυκλικό buffer 
    για κάθε μονοπάτι αρχείου στον πίνακα από strings. Στην εντολή "/addVaccinationRecords" 
    καλεί την συνάρτηση newfiles που μετράει τα νέα αρχεία και δημιουργεί τα threads 
    καλώντας την consumer. Το κύριο thread καλεί την εντολή addVacRecords που εκτελεί την 
    place για κάθε νέο αρχείο που βρίσκει. 



