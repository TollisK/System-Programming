    1η Εργασία Προγραμματισμός Συστήματος

    Ονοματεπώνυμο: Απόστολος Καρβέλας

    Α.Μ.: 1115201800312


    Εκτέλεση προγράμματος: 

    Για την εκτέλεση του προγράμματος υπάρχει αρχείο makefile, το οποίο μεταγλωττίζει τα 
    αρχεία σε εκτελέσιμο με όνομα vaccineMonitor και την χρησιμοποιούμε τρέχοντας την 
    εντολή make. Αφού έχει δημιουργηθεί εκτελέσιμο αρχείο, το καλούμε με την εντολή 
    ./vaccineMonitor -b X -c Y , όπου X και Y παράμετροι για το μέγεθος του bloom filter σε 
    bytes (προκαθορισμένη τιμή 10000) και το όνομα του αρχείου εισαγωγής (προκαθορισμένο 
    ως inputFile) αντίστοιχα. Στην συνέχεια, εκτυπώνει τις επιλογές στο τερματικό και περιμένει 
    εισαγωγή από τον χρήστη.

    Το bash script testFile.sh δημιουργεί το αρχείο εισαγωγής για την vaccineMonitor και το 
    τρέχουμε με την εντολή ./testFile.sh virusesFile countriesFile numLines duplicatesAllowed , 
    όπου virusesFile το αρχείο με τους ιούς, countriesFile αρχείο με τις χώρες, numLines τις 
    γραμμές που θα έχει το αρχείο και το duplicatesAllowed 0 αν δεν θέλουμε διπλότυπα και 1 
    για την πιθανότητα (20%) να φτιαχτεί duplicate. Τέλος, αν το script καταλάβει λάθος 
    εισαγωγή, είτε τα αρχεία δεν υπάρχουν είτε λάθος αριθμός από arguments, τερματίζει το 
    πρόγραμμα.

    Αρχεία κώδικα:

    country.cpp/.h

    Για την υλοποίηση των χωρών έχει δημιουργηθεί ένα struct country με δεδομένα το όνομα 
    της χώρας και έναν δείκτη country ώστε να είναι σε μορφή λίστας. Επίσης έχει τις κλασικές 
    συναρτήσεις λίστας, εισαγωγή, εύρεση και διαγραφή λίστας.

    person.cpp/.h:

    struct Date: Η ημερομηνία είναι ένα struct με δεδομένα 3 integers που αντιστοιχούν στην 
    μέρα, μήνα και χρόνια. Επίσης η συνάρτηση datecalc (Date,Date) επιστρέφει true αν η 
    πρώτη ημερομηνία είναι μετά την δεύτερης.

    class Person: Για την υλοποίηση των ανθρώπων υπάρχει μια κλάση Person με δεδομένα το 
    citizenid, το όνομα και το επίθετο, έναν δείκτη σε έναν κόμβο στην λίστα των χωρών, την 
    ηλικία και ένα struct Date. Αλλά, στο αρχείο εισόδου έχουμε πολλούς ανθρώπους που 
    πρέπει να διαβάζουμε δυναμικά, οπότε χρειάζεται μια λίστα ανθρώπων. Οπότε, υπάρχει 
    ένα struct NodePerson που περιέχει μια κλάση Person και έναν δείκτη στον επόμενο κόμβο 
    της λίστας. Για την λίστα υπάρχουν οι κλασικές συναρτήσεις εισαγωγής που περνάει τα 
    δεδομένα στην λίστα, καταστροφή λίστας για την διαγραφή της μνήμης και μια συνάρτηση 
    εύρεσης ανθρώπου που βρίσκει έναν άνθρωπο με συγκεκριμένο ιό από την λίστα.


    bloom.cpp/.h: 
    
    Για την δημιουργία της δομής bloom filter φτιάχνεται ένας πίνακας από 
    χαρακτήρες με μέγεθος το bloomsize που παίρνουμε σαν argument από την main. Ο ένας 
    χαρακτήρας σε περιβάλλον C++ είναι 1byte, οπότε ο πίνακας αυτός αποτελείται από 
    bloomsize*8 bits για την χρήση του στην συνάρτηση εύρεσης. Η διαχείριση του πίνακα 
    γίνεται μέσω των συναρτήσεων setbit που κάνει ένα bit 1 και testbit που βλέπει ένα 
    συγκεκριμένο bit. Για την εισαγωγή ενός ατόμου στο bloom filter υπάρχει η συνάρτηση 
    insertbloom η οποία δέχεται σαν όρισμα το citizenid σε μορφή string και τον αριθμό των 
    συναρτήσεων κατακερματισμού που θέλουμε να εισάγουμε. Στην συνέχεια για κάθε 
    συνάρτηση κατακερματισμού, που δίνεται από την εκφώνηση, μέσω ενός βρόγχου από το 0 
    έως Κ κάνει στον bloom filter πίνακα 1 το μπιτ που επιστρέφουν οι συναρτήσεις αυτές. Ο 
    κάθε ιός έχει και τον δικό του bloom filter, οπότε αφού διαβάζουμε δυναμικά τους ιούς 
    πρέπει να δημιουργήσουμε μια λίστα από bloom filters. Έτσι υπάρχει ένα struct Nodebloom 
    με δεδομένα το όνομα του ιού, τον πίνακα για την bloom και τον δείκτη στον επόμενο 
    κόμβο. Προφανώς έχει και τις κλασικές συναρτήσεις λίστας εισαγωγής, εύρεσης και 
    διαγραφής λίστας. 


    skiplist.cpp/.h:

    Για την υλοποίηση μιας δομής δεδομένων skip list έχει φτιαχτεί ένας 
    μονοδιάστατος πίνακας από structs vaclist με μέγεθος τον μέγιστο αριθμό από επίπεδα που 
    μπορεί να έχει η λίστα, το max level ορίζεται στην main με προκαθορισμένη τιμή 10. Το 
    struct περιλαμβάνει έναν δείκτη σε person όπως και 2 δείκτες σε struct vaclist τα οποία 
    αντιπροσωπεύουν τον επόμενο κόμβο όπως και τον κόμβο στο κάτω ακριβώς επίπεδο.       
    Ο δείκτης down χρησιμοποιείται για την ένωση των κόμβων σε 2 συνεχόμενα επίπεδα όπου 
    και οι 2 δείχνουν στον ίδιο άνθρωπο, στο μηδενικό επίπεδο είναι προφανώς NULL, ενώ ο 
    δείκτης next υπάρχει για την δημιουργία συνδεδεμένης λίστας. Με αυτό το μοντέλο έχουμε 
    την δυνατότητα εισαγωγής και εύρεσης με πολυπλοκότητα O(logn). Για την εισαγωγή 
    χρησιμοποιούνται 3 συναρτήσεις η πρώτη είναι η insertafter η οποία εισάγει έναν νέο 
    κόμβο μετά από τον κόμβο του ορίσματος προσθέτοντας τα δεδομένα person,και τον κάτω 
    κόμβο που δέχεται σαν όρισμα. Επιπλέον, υπάρχει η insert_rec που τρέχει αναδρομικά, 
    από το επίπεδο που δέχεται ως όρισμα, την λίστα και βρίσκει τον κόμβο του οποίου το 
    citizenid του ανθρώπου που δείχνει είναι ακριβώς μικρότερο του ανθρώπου που 
    εισάγουμε. Στην συνέχεια, υπολογίζει τον κάτω κόμβο τρέχοντας ξανά την συνάρτηση για 
    το επόμενο επίπεδο και επιστρέφει τον κόμβο που εισάγει σε αυτό το επίπεδο μέσω της 
    συνάρτησης insertafter. Η συνάρτηση έχει τελική κατάσταση όταν βρίσκεται κάτω από το 
    μηδενικό επίπεδο και επιστρέφει NULL. Τέλος, κρατάει σαν όρισμα την αρχικό κόμβο στον 
    πίνακα για την χρήση του όταν ο νέος άνθρωπος πρέπει να εισέρθει  στην αρχή της λίστας. 
    Η τρίτη συνάρτηση insertskiplist υπολογίζει το μέγιστο επίπεδο που πρέπει να εισαχθεί ο 
    κόμβος και τρέχει την insert_rec για την vaccinated list ή την unvaccinated list ανάλογα το 
    όρισμα. Η εύρεση λειτουργεί με την ίδια λογική χρησιμοποιώντας τις συναρτήσεις 
    searchnodeskip και searchlistskip, με την διαφορά ότι η searchnodeskip, που μοιάζει με την 
    insert_rec, δεν εισάγει δεδομένα αλλά αρχίζει από το πιο υψηλό επίπεδο και αν βρει τον 
    άνθρωπο που ψάχνουμε, με πεδίο κλειδί το citizenid, τον επιστρέφει. Αλλιώς, συνεχίζει από 
    τον κάτω κόμβο εκείνου με το ακριβώς μικρότερο citizenid τρέχοντας πάλι την συνάρτηση 
    σε ένα χαμηλότερο επίπεδο και σταματάει αν δεν τον βρει και στο μηδενικό επίπεδο. Ο 
    κάθε ιός έχει 2 skip lists, έναν για τους vaccinated και ένας για τους unvaccinated, οπότε 
    αφού διαβάζουμε δυναμικά τα δεδομένα πρέπει να φτιαχτεί λίστα. Αυτό γίνεται μέσω ενός 
    struct NodeSkip το οποίο έχει δεδομένα το όνομα του ιού, τις 2 λίστες δεικτών από struct 
    vaclists για την υλοποίηση skip list και έναν δείκτη σε struct NodeSkip για την δημιουργία 
    λίστας. Όταν αρχικοποιείται ένας νέος κόμβος struct NodeSkip  φτιάχνεται επίσης και οι 
    πίνακες με μέγεθος όσο το max level.


    main.cpp

    Στην αρχή της main διαβάζει τα arguments με και βάζει σαν αρχείο εισόδου την λέξη μετά 
    το -c και το μέγεθος του bloom μετά το -b με προκαθορισμένη τιμή inputFile και 10000 
    bytes αντίστοιχα. Στην συνέχεια διαβάζει κάθε γραμμή αποθηκεύοντας τα δεδομένα, 
    τρέχοντας την συνάρτηση insertCitizenRecord με τα δεδομένα αυτά. Επίσης, σε έναν άπειρο 
    βρόχο δείχνει τις επιλογές για συναρτήσεις και ανάλογα την είσοδο και τα δεδομένα 
    πηγαίνει στην αντίστοιχη περίπτωση, χρησιμοποιώντας switch case. Για τις πρώτες 2 
    επιλογές vaccinestatusbloom και vaccineStatus βρίσκει τον κόμβο για τον συγκεκριμένο ιό 
    και στην συνέχεια τρέχει τις συναρτήσεις search. Ενώ η vaccineStatus χωρίς είσοδο ιού 
    τρέχει την vaccineStatus για κάθε κόμβο του NodeSkip και εκτυπώνει τα δεδομένα. Για τις 
    επιλογές populationStatus και popStatusByAge εντοπίζει την skip list για τον ιό και τρέχει τις 
    2 αυτές συναρτήσεις. Για την πρώτη τρέχει την λίστα χωρών και για κάθε χώρα ανατρέχει 
    την vaccinated skip list και εντοπίζει τα άτομα με ημερομηνία ανάμεσα αυτές που δώσαμε 
    ως όρισμα, αν δοθεί χώρα τότε εντοπίζει μόνο τα άτομα στην συγκεκριμένη χώρα και 
    εκτυπώνει τον αριθμό των ατόμων αυτών και το ποσοστό τους για την χώρα. Ενώ για την 
    δεύτερη συνάρτηση διατρέχει την λίστα χωρών και για κάθε διάστημα ηλικίας βλέπει την 
    vaccinated skip list και εντοπίζει πάλι τα άτομα ανάμεσα στις ημερομηνίες, αν δοθεί χώρα 
    τρέχει μόνο για αυτήν και εκτυπώνει τα άτομα για κάθε διάστημα ηλικιών μαζί με το 
    ποσοστό των ανθρώπων που εμβολιάστηκαν ανάμεσα στις ημερομηνίες. Και για τις 2 
    συναρτήσεις αν δεν δοθεί ημερομηνία σαν όρισμα δέχεται όλα τις ημερομηνίες των 
    ανθρώπων. Για την συνάρτηση insertCitizenRecord που χρησιμεύει για την εισαγωγή 
    ανθρώπου στις κατάλληλες λίστες στην αρχή βλέπει για error cases όπως την ηλικία και την 
    έλλειψη ημερομηνίας αν είναι εμβολιασμένος. Στην συνέχεια, εξετάζει το ενδεχόμενο να 
    έχει εισαχθεί ήδη, οπότε πετάει error message και σταματάει την συνάρτηση, αλλιώς αν 
    χρειάζεται εισάγει νέο SkipNode και NodeCountry για καινούργιο ιό. Αν έχει εμβολιαστεί, 
    δηλαδή έχει δεδομένο YES, κοιτάει να υπάρχει ήδη κόμβος για τον ιό και αν ισχύει τότε 
    εισάγει το άτομο στην bloom, ενώ αν δεν υπάρχει τότε φτιάχνει πρώτα νέο κόμβο και 
    ύστερα εισάγει τον άνθρωπο. Τέλος, εισάγει τον άνθρωπο στην ανάλογη skip list, 
    vaccinated ή unvaccinated, ανάλογα το boolean YES/NO. Στην vaccinateNow βρίσκει το 
    NodeSkip του ιού και μέσω της συνάρτησης searchlistskip εξετάζει αν βρίσκεται σε κάποια 
    από τις 2 skip lists. Αν είναι στην vaccinated τότε εκτυπώνει error ενώ αν είναι στην 
    unvaccinated τότε διαγράφει τον άνθρωπο από την skip list και αν δεν υπάρχει καθόλου ή 
    είναι στους unvaccinated τότε τον εισάγει στην vaccinated skip list. H /list-nonVaccinated-
    Personsεκτυπώνει τα μη-εμβολιασμένα άτομα για τον ιό και η /exit καθαρίζει την μνήμη και 
    τερματίζει το πρόγραμμα.



